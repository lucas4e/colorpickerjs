{"version":3,"sources":["components/useScrollValue.js","App.js","components/useMousePosition.js","components/setConstraints.js","components/useCalculateRGB.js","components/useCalculateHEX.js","index.js"],"names":["useScrollValue","useState","scrollVal","setScrollVal","useEffect","handleScroll","event","wheelDelta","deltaY","checkScrollDirection","window","addEventListener","removeEventListener","App","hasMoved","useRef","InputHover","setInputHover","hue","setHue","saturation","setSaturation","lightness","setLightness","mousePos","x","innerWidth","y","innerHeight","position","setPosition","mousePressed","setMousePressed","handleKeyPress","e","type","setFromEvent","clientX","clientY","useMousePosition","HSLRef","HEXRef","RGBRef","element","document","getElementById","copy","outputBox","getElementsByClassName","listenForMove","current","once","i","length","props","setConstraints","useMemo","mousePosDivByWindow","s","l","handleClick","navigator","clipboard","writeText","innerHTML","then","classList","contains","add","setTimeout","remove","console","log","rgb","getComputedStyle","getPropertyValue","hex","match","slice","map","n","parseInt","toString","padStart","join","RGBtoHEX","useCalculateHEX","hsl","Math","round","className","id","style","backgroundColor","ref","value","onClick","ReactDOM","render","StrictMode"],"mappings":"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","file":"static/js/main.9dffd7ed.chunk.js","sourcesContent":["import { useEffect, useState } from 'react';\r\n\r\nexport const useScrollValue = () => {\r\n  const [scrollVal, setScrollVal] = useState(50);\r\n  const tick = 2;\r\n\r\n  const checkScrollDirection = (event) => {\r\n    if (event.wheelDelta) {\r\n      return event.wheelDelta > 0;\r\n    }\r\n\r\n    return event.deltaY < 0;\r\n  };\r\n\r\n  const incrementScroll = () => {\r\n    return setScrollVal(scrollVal + tick);\r\n  };\r\n\r\n  const decrementScroll = () => {\r\n    return setScrollVal(scrollVal - tick);\r\n  };\r\n\r\n  const setConstraints = () => {\r\n    if (scrollVal > 100) {\r\n      setScrollVal(100);\r\n    }\r\n\r\n    if (scrollVal < 0) {\r\n      setScrollVal(0);\r\n    }\r\n  };\r\n\r\n  useEffect(() => {\r\n    const handleScroll = (event) => {\r\n      if (checkScrollDirection(event)) {\r\n        incrementScroll();\r\n      } else {\r\n        decrementScroll();\r\n      }\r\n    };\r\n    window.addEventListener('wheel', handleScroll);\r\n    return () => {\r\n      window.removeEventListener('wheel', handleScroll);\r\n    };\r\n  }, [scrollVal]);\r\n\r\n  setConstraints();\r\n\r\n  return scrollVal;\r\n};\r\n","import React, { useState, useEffect, useMemo, useRef } from 'react';\r\nimport { useMousePosition } from './components/useMousePosition';\r\nimport { useScrollValue } from './components/useScrollValue';\r\nimport { setConstraints } from './components/setConstraints';\r\nimport { useCalculateRGB } from './components/useCalculateRGB';\r\nimport { useCalculateHEX } from './components/useCalculateHEX';\r\nimport './index.css';\r\n\r\n//Feather Icons\r\nimport { Check, HelpCircle, Copy, ChevronRight } from 'react-feather';\r\n\r\nfunction App() {\r\n  const hasMoved = useRef(false);\r\n  const [InputHover, setInputHover] = useState(false);\r\n  const [hue, setHue] = useState(0);\r\n  const [saturation, setSaturation] = useState(0);\r\n  const [lightness, setLightness] = useState(0);\r\n  const maxHue = 360;\r\n\r\n  const mousePos = useMousePosition();\r\n  const scrollVal = useScrollValue();\r\n\r\n  const HSLRef = useRef(null);\r\n  const HEXRef = useRef(null);\r\n  const RGBRef = useRef(null);\r\n\r\n  const element = document.getElementById('background');\r\n  const copy = document.getElementById('copyPopup');\r\n  const outputBox = document.getElementsByClassName('copyBtn');\r\n\r\n  const listenForMove = () => {\r\n    hasMoved.current = true;\r\n    document.removeEventListener('mousedown', listenForMove);\r\n    document.removeEventListener('wheel', listenForMove);\r\n  };\r\n\r\n  document.addEventListener('mousedown', listenForMove, { once: true });\r\n  document.addEventListener('wheel', listenForMove, { once: true });\r\n\r\n  if (outputBox) {\r\n    for (let i = 0; i < outputBox.length; i++) {\r\n      outputBox[i].addEventListener('mouseover', () => {\r\n        setInputHover(true);\r\n      });\r\n      outputBox[i].addEventListener('mouseout', () => {\r\n        setInputHover(false);\r\n      });\r\n    }\r\n  }\r\n\r\n  const constraints = useMemo(() => {\r\n    const props = {\r\n      hue,\r\n      setHue,\r\n      saturation,\r\n      setSaturation,\r\n      lightness,\r\n      setLightness,\r\n    };\r\n    return {\r\n      props,\r\n    };\r\n  }, [hue, saturation, lightness]);\r\n\r\n  setConstraints(constraints);\r\n\r\n  useEffect(() => {\r\n    if (!InputHover) {\r\n      const mousePosDivByWindow = mousePos.y / window.innerHeight;\r\n      const newSaturation = mousePosDivByWindow * 100;\r\n      setSaturation(newSaturation);\r\n    }\r\n  }, [mousePos.y]);\r\n\r\n  useEffect(() => {\r\n    if (!InputHover) {\r\n      const mousePosDivByWindow = mousePos.x / window.innerWidth;\r\n      const newHue = mousePosDivByWindow * maxHue;\r\n      setHue(newHue);\r\n    }\r\n  }, [mousePos.x]);\r\n\r\n  useEffect(() => {\r\n    setLightness(scrollVal);\r\n  }, [scrollVal]);\r\n\r\n  const getHSL = (h, s, l) => {\r\n    h = hue;\r\n    s = saturation;\r\n    l = lightness;\r\n\r\n    return `hsl(${h}, ${s}%, ${l}%)`;\r\n  };\r\n\r\n  const handleClick = (e) => {\r\n    navigator.clipboard.writeText(e.current.innerHTML).then(\r\n      () => {\r\n        if (!copy.classList.contains('popup')) {\r\n          copy.classList.add('popup');\r\n          setTimeout(() => {\r\n            copy.classList.remove('popup');\r\n          }, 1200);\r\n        }\r\n      },\r\n      () => {\r\n        console.log('Copy to clipboard failed');\r\n      }\r\n    );\r\n  };\r\n\r\n  const displayHSL = () => {\r\n    return `hsl(${Math.round(hue)}, ${Math.round(saturation)}%, ${lightness}%)`;\r\n  };\r\n\r\n  let rgb = useCalculateRGB(element);\r\n  let hex = useCalculateHEX(element);\r\n  let hsl = displayHSL();\r\n\r\n  return (\r\n    <div className='container'>\r\n      <div\r\n        className='background'\r\n        id='background'\r\n        style={{ backgroundColor: getHSL(hue, saturation, lightness) }}\r\n      >\r\n        <div className='about'>\r\n          <HelpCircle />\r\n        </div>\r\n\r\n        <div>\r\n          {!hasMoved.current ? (\r\n            <div className='infoMsg absolute disable-select'>\r\n              Click and drag cursor to change the background color\r\n            </div>\r\n          ) : (\r\n            <div\r\n              id='colorProps'\r\n              className='colorProps absolute disable-select cursor glass'\r\n            >\r\n              <span>\r\n                <span>\r\n                  <h2>HSL</h2>\r\n                  <p ref={HSLRef} value='HSL'>\r\n                    {hsl}\r\n                  </p>\r\n                </span>\r\n                <Copy className='copyBtn' onClick={() => handleClick(HSLRef)} />\r\n              </span>\r\n              <div className='line'></div>\r\n              <span>\r\n                <span>\r\n                  <h2>RGB</h2>\r\n                  <p ref={RGBRef} value='RGB'>\r\n                    {rgb}\r\n                  </p>\r\n                </span>\r\n                <Copy className='copyBtn' onClick={() => handleClick(RGBRef)} />\r\n              </span>\r\n              <div className='line'></div>\r\n              <span>\r\n                <span>\r\n                  <h2>HEX</h2>\r\n                  <p ref={HEXRef} value='HEX'>\r\n                    {hex}\r\n                  </p>\r\n                </span>\r\n                <Copy className='copyBtn' onClick={() => handleClick(HEXRef)} />\r\n              </span>\r\n              <div className='line'></div>\r\n              <div className='instructions'>\r\n                <span>\r\n                  <ChevronRight />\r\n                  <p>Click and drag left and righ to change hue</p>\r\n                </span>\r\n                <span>\r\n                  <ChevronRight />\r\n                  <p>Click and drag up and down to change saturation</p>\r\n                </span>\r\n                <span>\r\n                  <ChevronRight />\r\n                  <p>Scroll to change lightness</p>\r\n                </span>\r\n              </div>\r\n            </div>\r\n          )}\r\n        </div>\r\n        <div\r\n          id='copyPopup'\r\n          className='copyPopup absolute disable-select cursor glass'\r\n        >\r\n          <div>\r\n            <p>Copied</p>\r\n            <Check />\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","import { useEffect, useState } from 'react';\r\n\r\nexport const useMousePosition = () => {\r\n  const [position, setPosition] = useState({\r\n    x: window.innerWidth / 2,\r\n    y: window.innerHeight / 2,\r\n  });\r\n  const [mousePressed, setMousePressed] = useState(false);\r\n\r\n  useEffect(() => {\r\n    const handleKeyPress = (e) => {\r\n      if (e.type === 'mousedown') {\r\n        setMousePressed(true);\r\n      } else {\r\n        setMousePressed(false);\r\n      }\r\n    };\r\n    window.addEventListener('mouseup', handleKeyPress);\r\n    window.addEventListener('mousedown', handleKeyPress);\r\n    return () => {\r\n      window.removeEventListener('mousedown', handleKeyPress);\r\n      window.removeEventListener('mouseup', handleKeyPress);\r\n    };\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    const setFromEvent = (e) => {\r\n      if (mousePressed === true) {\r\n        setPosition({ x: e.clientX, y: e.clientY });\r\n      }\r\n    };\r\n    window.addEventListener('mousemove', setFromEvent);\r\n    return () => {\r\n      window.removeEventListener('mousemove', setFromEvent);\r\n    };\r\n  }, [mousePressed]);\r\n\r\n  return position;\r\n};\r\n","export const setConstraints = ({ props }) => {\r\n  const { hue, setHue, saturation, setSaturation, lightness, setLightness } =\r\n    props;\r\n\r\n  if (hue > 360) {\r\n    return setHue(360);\r\n  }\r\n\r\n  if (hue < 0) {\r\n    return setHue(0);\r\n  }\r\n\r\n  if (saturation > 100) {\r\n    return setSaturation(100);\r\n  }\r\n\r\n  if (saturation < 0) {\r\n    return setSaturation(0);\r\n  }\r\n\r\n  if (lightness > 100) {\r\n    return setLightness(100);\r\n  }\r\n\r\n  if (lightness < 0) {\r\n    return setLightness(0);\r\n  }\r\n};\r\n","export const useCalculateRGB = (e) => {\r\n  if (!e) {\r\n    return <p>Loading</p>;\r\n  }\r\n\r\n  const style = window\r\n    .getComputedStyle(e, null)\r\n    .getPropertyValue('background-color');\r\n\r\n  return style;\r\n};\r\n","import React from 'react';\r\n\r\nexport const useCalculateHEX = (e) => {\r\n  if (!e) {\r\n    return <p>Loading</p>;\r\n  }\r\n\r\n  const RGBtoHEX = (rgb) => {\r\n    const hex = `#${rgb\r\n      .match(/^rgb\\((\\d+),\\s*(\\d+),\\s*(\\d+)\\)$/)\r\n      .slice(1)\r\n      .map((n) => parseInt(n, 10).toString(16).padStart(2, '0'))\r\n      .join('')}`;\r\n\r\n    return hex;\r\n  };\r\n\r\n  const rgb = window\r\n    .getComputedStyle(e, null)\r\n    .getPropertyValue('background-color');\r\n\r\n  const hex = RGBtoHEX(rgb);\r\n  return hex;\r\n};\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}